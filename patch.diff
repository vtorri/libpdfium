diff --git a/third_party/base/win/win_util.cc b/third_party/base/win/win_util.cc
index ae2dba84d..ff808526a 100644
--- a/third_party/base/win/win_util.cc
+++ b/third_party/base/win/win_util.cc
@@ -11,29 +11,41 @@ namespace pdfium {
 namespace base {
 namespace win {
 
-bool IsUser32AndGdi32Available() {
-  static auto is_user32_and_gdi32_available = []() {
-    // If win32k syscalls aren't disabled, then user32 and gdi32 are available.
+static bool set = false;
+static bool have_user32_gdi32 = false;
 
-    typedef decltype(
-        GetProcessMitigationPolicy)* GetProcessMitigationPolicyType;
-    GetProcessMitigationPolicyType get_process_mitigation_policy_func =
-        reinterpret_cast<GetProcessMitigationPolicyType>(GetProcAddress(
-            GetModuleHandle(L"kernel32.dll"), "GetProcessMitigationPolicy"));
+typedef  BOOL (WINAPI *gpmp_t)(HANDLE hProcess, PROCESS_MITIGATION_POLICY MitigationPolicy, PVOID lpBuffer, SIZE_T dwLength);
 
-    if (!get_process_mitigation_policy_func)
-      return true;
+bool IsUser32AndGdi32Available() {
+#if _WIN32_WINNT >= 0x0602
+  if (set)
+    return have_user32_gdi32;
+
+    gpmp_t gpmp = (gpmp_t)GetProcAddress(GetModuleHandle(L"kernel32.dll"),
+                                         "GetProcessMitigationPolicy");
+    if (!gpmp)
+    {
+        set = true;
+        have_user32_gdi32 = true;
+        return have_user32_gdi32;
+    }
 
     PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY policy = {};
-    if (get_process_mitigation_policy_func(GetCurrentProcess(),
-                                           ProcessSystemCallDisablePolicy,
-                                           &policy, sizeof(policy))) {
-      return policy.DisallowWin32kSystemCalls == 0;
+    if (gpmp(GetCurrentProcess(),
+             ProcessSystemCallDisablePolicy,
+             &policy, sizeof(policy)))
+    {
+        set = true;
+        have_user32_gdi32 = (policy.DisallowWin32kSystemCalls == 0);
+        return have_user32_gdi32;
     }
 
+    set = true;
+    have_user32_gdi32 = true;
+    return have_user32_gdi32;
+#else
     return true;
-  }();
-  return is_user32_and_gdi32_available;
+#endif
 }
 
 }  // namespace win
